"use client"

import { Tooltip } from "antd" ;
import { forwardRef } from 'react';
import { IoMdHelpCircle } from "react-icons/io";
import { BsSearch } from "react-icons/bs"

const TextInput = forwardRef(function TextInput(props, ref) {
    const { ...otherProps } = props;
    const { label } = props;
    return (
        <div className="relative block w-full ">
            <div className="flex justify-start items-center mb-1">
                {label && <label className="block text-blue-gray text-sm font-medium  appearance-none" >{label}</label>}
                {props?.helptext ? (
                    <Tooltip title={props?.helptext || "Help" } placement="right">
                        <IoMdHelpCircle  size={20}  className="ml-2 text-green"/>
                    </Tooltip>
                ) : null }
            </div>
            <input { ...otherProps } onChange={(e) => (ref.current = e.target.value)}  className="custom-form-control py-1 px-2 w-fill-available"  />
        </div>
    );
});

const SelectInput = forwardRef(function SelectInput(props, ref) {
    const { ...otherProps } = props;
    const { options } = props;
    const { label } = props;
    const { defaultValue } = props;
    // ref.current = props?.defaultValue !== null ? props?.defaultValue : options?.[0]?.value;
    // console.debug(props?.defaultValue , label)
    // console.debug(typeof(props?.defaultValue) , label)
    // console.debug(props?.defaultValue !== null ? props?.defaultValue : options?.[0]?.value, label)
    return (
        <div className="relative block w-full ">
        <div className="flex justify-start items-center mb-1">
                {label && <label className="block text-blue-gray text-sm font-medium  appearance-none" >{label}</label>}
                {props?.helptext ? (
                    <Tooltip title={props?.helptext || "Help" } placement="right">
                        <IoMdHelpCircle  size={20}  className="ml-2 text-green"/>
                    </Tooltip>
                ) : null }
            </div>
        <select  { ...otherProps } className="custom-form-control py-1 px-2 w-fill-available" defaultValue={defaultValue !== null ? props?.defaultValue : options?.[0]?.value} onChange={(e) => (ref.current = e.target.value)}>
            {options.map((option, index) =>  (<option value={option.value} key={index}  >{option.label}</option>))}
        </select>
    </div>
    )
});

const TextAreaInput = forwardRef(function TextAreaInput(props, ref) {
    const { ...otherProps } = props;
    const { label } = props;
    // const { defaultValue } = props;
    return (
        <div className="relative block w-full ">
            <div className="flex justify-start items-center mb-1">
                {label && <label className="block text-blue-gray text-sm font-medium  appearance-none" >{label}</label>}
                {props?.helptext ? (
                    <Tooltip title={props?.helptext || "Help" } placement="right">
                        <IoMdHelpCircle  size={20}  className="ml-2 text-green"/>
                    </Tooltip>
                ) : null }
            </div>
            <textarea  { ...otherProps }  className="custom-form-control py-1 px-2 w-fill-available" onChange={(e) => (ref.current = e.target.value)} style={{height:"100px"}}></textarea>
        </div>
    )
});

const SearchInput = ({placeholder  = "Search"}) => {
    return (
      <div className="relative" >
        <input
          type="text"
          placeholder={placeholder}
          className=" custom-form-control  py-1 px-2 w-fill-available"
        />
        <button
          type="button"
          className="w-4 h-4 absolute inset-y-0 mt-auto mb-auto mr-3 right-0 text-white bg-transparent border-none hover-cursor-pointer"
        >
            <BsSearch className="h-4 w-4 mr-2" />
        </button>
      </div>
    );
};


export { TextInput, SelectInput, TextAreaInput, SearchInput };


---------------

<TextInput label={"Name"} ref={name} placeholder={"Sample Scenario - 1"} type={"text"}  />